30일

**git의 사용
1.크롬 브라우저에서 "download git"을 검색하여 다운받기
2. https://github.com/ 깃허브에 접속하여 계정생성
3. 만약 push 하는 과정에서 다음과 같은 오류가 발생하면
git remote add origin https://github.com/TaeInYun/javaStudy.git
error: remote origin already exists. 
크롬에서 "git token 생성"을 검색하여 토큰을 생성한

----------------------------------------------------
<<오류의 종류>>
1.문법오류
	자바문법 규칙에 맞지 않는 오류이며 컴파일이 
되지 않습니다.
컴파일시에 오류 메세지를 출력해줍니다.
오류 메세지에 따라 오류를 해결하고 다시 컴파일 해 줍니다.

2.논리오류
	자바문법은 올바르지만 논리적으로 문제해결을 잘 못 판단하여 
	프로그램이 작성되어 원하는 데로 동작하지 않는 오류를 말합니다.
	이런경우를 "버그"가 있다고 하고 말하며 이러한 "버그"를 해결하는 과정을
	"디버깅"한다 라고 합니다.
3.실행오류
	자바문법도 올바르고 잘 실행되는 프로그램이지만 사용자의 부주의로 인하여 예를 들어
	정수를 입력해야 하는 곳에서 문자열을 입력한다던지 하는 사용자의 프로그램 사용 미숙 등으로
	인하여 발생하는 오류를 말합니다.이러한 경우에는 예외처리를 통하여 문제를 해결할 수 있습니다.

---------------------------------------------------------------------------------

<<이름 작성의 규칙>>
클래스이름이나 변수이름이나 메소드이름을 정해 줄 때에는 가능하면 의미있는 이름으로 정해 줍니다.

이러한 이름을 정해 줄 때는 가능하면 의미있는 사용자가 임의로 정해 줄 수 있어요.

그러나 다음의 내용은 반드시 지켜야 함.
	-클래스이름이나 변수이름이나 메소드이름의 첫글자는 영문
		이거나 _기호 이거나 $기호만 사용할수 있음
		특별한 경우가 아니면 기호는 사용하지 않음
		영문으로 시작하도록 합니다.

		또, 클래스이름의 첫글자는 대문자로 시작하도록 합니다.
		변수이름이나 메소드이름의 첫글자는 소문자로 시작하도록 합니다.
		
		클래스 이름이나 변수이름 메소드이름을 의미있는 이름으로 정해
		주다 보면 두개의 단어이상을 합쳐야 하는 경우가 있는데
		이때에는 두번째 단어 이후에 시작하는 각 단어의 첫글자를
		대문자로 써서 읽기가 쉽도록 합니다.
		ex) 변수
		    MyAge 처럼 사용함

	-클래스이름이나 변수이름이나 메소드이름에는
		공백문자를 포함할 수 없음.

		My Age 이러한 변수를 만들 수 없습니다.

		(폴더를 만들때에도 가급적이면 공백문자를 사용하지 않도록 합니다.)
------------------------------------------------------------------------------------------

<<주석문>>
프로그램의 실행에 영향을 끼치지 않고 
설명을 하기 위한 문장을 말합니다.

한줄 주석 
	//로 시작하면 거기서 부터 그 줄 끝까지는 주석문으로 처리됩니다.
여러줄 주석
	/*로 시작하고

	*/로 끝나는 데 까지의 여러줄을 주석문으로 처리됩니다.

주석문은
협업을 위한 다른 개발자나 미래의 후임자나 나 자신을 위해서도 설명문이 필요할 때 사용.

또, 논리오류를 제거하기 위한
디버깅을 할 때에도 
의심되는 코드를 주석문으로 처리해 가면서
활용할 수 있음

--------------------------------------------------------------------------

<<제어문>>
	프로그램의 흐름을 제어 하는 문장들을 말합니다.

	1. 선택문
	2. 반복문
	3. break, contine

--------------------------------------------------------------------------

<<선택문>>
	프로그램의 흐름에 따라 혹은 상황에 따라
	실행시키고자 하는 문장을 선택하기 위한 문장을 말합니다.

	1.if문
	2.switch case 문


-----------------------------------------------------------------------------

<<if 문>>
	조건식에 따라 실행시키고자 하는 문장을 선택할때에 사용합니다.
	조건식이 참일때 실행할 문장과 거짓일때 실행할 문장이 서로 달라지게
	사용할 수 도 있고,
	조건식이 참인지만 판별할 수도 있고,
	여러가지 조건식을 차례로 판별하도록 다양하게 사용할 수 있어요.

<<if 문을 사용하는 기본 형식>>

if (조건식)
	조건식이 참일때에 실행할 명령어;
else
	조건식이 거짓일때 실행할 명령어;

------------------------------------------------------------------------------
a;
b;
if(조건식)
	c;
else	
	d;
e;
f;

위의 경우 a와 b를 순차적으로 실행한 다음 
만약 조건식이 참이라면 c를 실행하고 e와 f를 차례로 실행함
a와b를 순차적으로 실행한 다음
만약 조건식이 거짓이라면 else에 있는 e와 f를 차례로 실행함

즉, e와 f를 if문에 넣고 else문에 넣지 말고
참이던 거짓이던 수행하고자 하는 명령어들은 
if문 밖으로 표현하는 것이 더 좋음.

-----------------------------------------------------------------------
a;
b;
if(조건식)
	c;
	d;
else
	e;
	f;
g;
h;

위에 코드는 만약 조건식이 참이라면 어떠한 문장을 실행할까요?
a,b를 차례로 실행한 다음 c,d를 실행하고 g,h를 실행하기를 기대하지만
위의 코드는 오류가 발생합니다.

만약 조건식이 참일때 c,d처럼 두가지 이상의 명령어를 실행시켜야 한다면
반드시 중괄호 {}로 묶어주어야 합니다.
그렇지 않으면 오류가 발생합니다.

a;
b;
if(조건식){
	c;
	d;
}
else{
	e;
	f;
}
g;
h;

위와 같이 표현해야지
조건식이 참일때 a,b를 실행한다음 c,d를 차레로 실행하고 g,h를 실행합니다.
만약 조건식이 거짓이라면 a,b를 실행한다음 e,f를 차레로 실행하고 g,h를 실행합니다.

---------------------------------------------------------------------

a;
b;
if(조건식1) {
	c;
}else if(조건식2){
	d;
}else if(조건식3){
	e;
}else{
	k;
}
f;
g;

위의 경우에는 a,b를 실행한 다음 먼저 조건식 1을 판별 
조건식 1이 참이라면 c를 실행하고 f,g를 실행합니다.
만약 a,b를 실행한 다음 조건식1을 판별했더니 거짓이라면 조건식2를 판별합니다.
조건식2가 참이라면 d를 실핼하고 f,g를 실행합니다.
a,b를 실행한다음 조건식1을 판별했더니 거짓이라면 조건식2를 판별합니다. 그것도 거짓이라면
조건식3을 판별합니다. 조건식 3이 참이라면 e를 실행하고 f,g를 실행합니다.
a,b를 실행한다음 조건식1,2,3이 다 거짓이면 else 에 있는 k를 실행하고 f,g를 실행합니다.

위와 같이 판단해야 하는 경우의 수가 여러가지 라면
if, else if, else로 표현할 수 있습니다.


------------------------------------------------------------------
a;
b;
if(조건식1){
	if(조건식2){
		c;
	}else{
		d;
	}
}else{
        if(조건식3{
	e;
	}else{
		f;
		}
}
g;
h;


a,b를 실행한다음 조건식 1을 판별 이조건식1이 참일 수도 있고 거짓일수도 있어요.
만약 조건식1이 참이라면 그안에서 또 조건식2를 판별함 만약 조건 조건식2도 참이라면 c를 실행 g,h실행
만약, 조건식1은 참인데 조건식2가 거짓이라면 d를 실행하고 g,h를 실행함
a,b를 실행한 다음 조건식1을 하였더니 거짓이라면 else에 있는 조건식3을 판별합니다.
만약 조건식3이참이라면 e를 실행 g,h 를 실행
조건식1도거짓 조건식3도 거짓이면 f를 실행 g,h를 실행

-----------------------------------------------------------------------
a;
b;
if(조건식) {
	c;
}
d;
e;

a,b를 실행한다음 조건식을 판별하여 조건식이 참이라면 c를 실행하고 d,e를 실햄함
a,b를 실행한 다음 조건식이 거짓이라면 d,e를 실행함

if 문이 있다고 해서 반드시 else 가 있어야 하는 것은 아닙니다.
내가 해결해야 하는 문제에 따라 else를 둘수도 있고 두지 않을 수 있음





System.out.println("월을 입력하시오");
		month = sc.nextInt();
		if(month>= 3 && month<= 5){
			name ="봄";
		}else if(month>= 6 && month =< 8){
			name = "여름";
		}else if(month>= 9 && month =< 11){
			name = "가을";
		}else if(month == 1 || month == 2 || month == 12){
			name = "겨울";
		}


에러가 나는 이유
== 지비기 핀딘힉
드롭박스보고 채우기 




String name;
String name = "";



--------------------------------------------------------------------------------

<<switch case 문>>
판단해야하는 경우가 수가 여러가지인 경우에 switch case 문을 사용하면 if보다는 좀더 간결하게 문장을 표현할수 있음

<<switch case 문의 형식>>
a;
b;
swithch(data){
	case 값1: 명령1;
	case 값2: 명령2;
	case 값3: 명령3;
	...
	case 값n:명령n;
	default:명령k
}
c;
d;

switch(data)에서 data에 올 수 있는 것은
정수형 변수이거나 어떠한 수식의 결과가 정수가 오도록 해야합니다.
data에 따라서 해당 값이 있는 case의 명령을 실행합니다.

a,b를 싱행하고 만약 data의 값이 값2리면 명령2명령3명령k까지 실행한다음 c.d를 실행합니다.
a,b를 실행하고 data의 값이 3이라면 case값3으로 바로 가서 명령3부터 명령k까지 쭉실행함
a,b를 실행하고 data의 값이 해당 case에 없으면 default 바로가서 명령k를 실행하고 switch를 탈출한다음 c,d를 실행

만약 data의 값이 2일때에 명령2부터명령k까지 쭉 실행시키지 않고 해당 case문에 있는 명령2만 동작시키고자 한다면 그 case문
끝에 break를 둡니다.

따라서 Switch case 문 쓸때에 반드시 모든 case문에 break가 있어야 하는 것은 아니고
필효한 곳에 적절한 위치에 break를 둠

switch 문의 각case에 필요하다면 
	또다른 swich가 오거나
	if문을 표현할 수 있습니다.

혹은 if조건식이 참이거나 거짓일때 수행할 문장으로 
	Switch을 표현할 수도 있어요!

사용자한테 생월과 생일을 입력받아
별자리를 판별하여 출력하는 프로그램을 작성 해 봅니다.

윤태인==>윤태인
생월==> 2
생일==> 9
윤태인님의 별자리는 물병자리입니다.

<<숙제>>

별자리 프로그램을 수정해봅니다. 클리어 !! 
오늘 학습내용을 요약하여 정리합니다.
pdf exr1번을 문장으로 표현해봅니다.
pro 6번 작성 




