/*
	정렬: 값을 순서대로 표현하는 것을 말합니다.
		-오름차순 정렬: 값이 작은 것 부터 먼저 오게 합니다.
		-내림차순 정렬: 값이 큰것 부터 먼저 오게 합니다.

		int []data={5,2,3,9,1};
		만약 위와 같이 배열의 요소가 5개로 구성되어 있다면
		오름차순 정렬이 된 후에는 {1,2,3,5,9}

		정렬하기 위해서는 
		배열의 각자리에 와야할 값을 차례로 찾아야 합니다
		위와 같이 배열의 원소가 5개라면
		0번째 자리에서는 5개 중에 가장 작은 값을 찾아 놓아야 합니다.
		0번째 자리의 값을 찾기 위해서는 1번째 부터 차례대로 0번째의 값과 비교하여
		비교하는 값과 0번째의 값보다 작으면 서로 맞바꾸어야 합니다.
		즉.0번째 와야할 값을 찾기 위해서는 1번째 부터 모든 배열의 원소를 비교하여 찾아야 합니다.
		0번째 와야할 값을 찾았다면 그다음 1번째 와야할 값을 찾습니다 1번
		중첩 반복문 사용
		i번째 와야할 값을 찾을 때 비교하는 j는 i+1에서부터 배열의 만큼 비교하여 맞지 않으면 i번째원소와 j번째원소를 맞바꾸어 줍니다.


*/
class SortArray  //정렬 순서대로 값을 표현 
{
	public static void main(String[] args) 
	{
		int[]data = {5,2,3,9,1};
		//오름차순 정렬 : {1,2,3,5,9}

		for(int i =0;i<data.length;i++){
			for(int j =i+1;j<data.length;j++){
			if(data[j]<data[i]){
				int temp = data[i]; //임시변수 선언
				data[i] =data[j];
				data[j] = temp;  //다시 임시변수를 j로 옮김
			}
			}
			/*
			System.out.println ("오름차순 정렬 결과");
			System.out.println (data[i]+ " ");
			*/
		}
		
		System.out.println ("***오름차순 정렬 결과***");
		for(int i =0;i<data.length;i++){
			System.out.print (data[i]+ " ");
	}
			
		
	}
}
